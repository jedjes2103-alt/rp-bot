import "dotenv/config";
import {
  Client,
  GatewayIntentBits,
  REST,
  Routes,
  SlashCommandBuilder,
  Events
} from "discord.js";

const client = new Client({ intents: [GatewayIntentBits.Guilds] });

// ---------- Define slash commands ----------
const slashDefs = [
  new SlashCommandBuilder()
    .setName("ping")
    .setDescription("‡πÄ‡∏ä‡πá‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏á (pong!)"),
  new SlashCommandBuilder()
    .setName("help")
    .setDescription("‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ")
].map(c => c.toJSON());

// ----- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á ping/help -----
import { PermissionsBitField } from "discord.js";

const slashDefs = [
  new SlashCommandBuilder().setName("ping").setDescription("‡πÄ‡∏ä‡πá‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏á"),
  new SlashCommandBuilder().setName("help").setDescription("‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"),
  // admin: ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á
  new SlashCommandBuilder()
    .setName("announce")
    .setDescription("‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")
    .addStringOption(o => o.setName("message").setDescription("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°").setRequired(true)),
  // ‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤
  new SlashCommandBuilder()
    .setName("roll")
    .setDescription("‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô 1d20, 2d6")
    .addStringOption(o => o.setName("dice").setDescription("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤").setRequired(true)),
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  new SlashCommandBuilder()
    .setName("userinfo")
    .setDescription("‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    .addUserOption(o => o.setName("target").setDescription("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô").setRequired(false)),
].map(c => c.toJSON());

function hasAllowedRole(member) {
  const adminRoleId = process.env.ADMIN_ROLE_ID;   // ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Render
  const modRoleId   = process.env.MOD_ROLE_ID;     // ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Render (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  if (!member || !member.roles) return false;
  const roles = member.roles.cache;
  return (
    roles.has(adminRoleId ?? "") ||
    roles.has(modRoleId ?? "") ||
    member.permissions.has(PermissionsBitField.Flags.Administrator)
  );
}

client.on(Events.InteractionCreate, async (i) => {
  if (!i.isChatInputCommand()) return;
  try {
    if (i.commandName === "ping") {
      const sent = await i.reply({ content: "Pong! üèì", fetchReply: true });
      const ms = sent.createdTimestamp - i.createdTimestamp;
      await i.editReply(`Pong! üèì \`${ms}ms\``);
    } else if (i.commandName === "help") {
      await i.reply({
        content:
          "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:\n‚Ä¢ `/ping`\n‚Ä¢ `/help`\n‚Ä¢ `/roll 1d20`\n‚Ä¢ `/userinfo`\n‚Ä¢ `/announce` (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô/‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î)",
        ephemeral: true
      });
    } else if (i.commandName === "announce") {
      if (!hasAllowedRole(i.member)) {
        return i.reply({ content: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral: true });
      }
      const msg = i.options.getString("message", true);
      await i.channel.send(`üì£ **‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®:** ${msg}`);
      await i.reply({ content: "‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡πâ‡∏ß!", ephemeral: true });
    } else if (i.commandName === "roll") {
      const spec = i.options.getString("dice", true).trim();
      const m = spec.match(/^(\d+)d(\d+)$/i);
      if (!m) return i.reply({ content: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡πà‡∏ô `1d20`, `2d6`", ephemeral: true });
      const n = Math.min(parseInt(m[1],10), 50); // ‡∏Å‡∏±‡∏ô‡∏™‡πÅ‡∏õ‡∏°
      const sides = Math.min(parseInt(m[2],10), 1000);
      const rolls = Array.from({length: n}, () => 1 + Math.floor(Math.random()*sides));
      const sum = rolls.reduce((a,b)=>a+b,0);
      await i.reply(`üé≤ \`${spec}\` ‚Üí [${rolls.join(", ")}] = **${sum}**`);
    } else if (i.commandName === "userinfo") {
      const user = i.options.getUser("target") ?? i.user;
      await i.reply({ content: `üë§ ${user.tag} (ID: ${user.id})`, ephemeral: true });
    }
  } catch (e) {
    console.error(e);
    if (i.deferred || i.replied) {
      await i.followUp({ content: "‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", ephemeral: true });
    } else {
      await i.reply({ content: "‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", ephemeral: true });
    }
  }
});


// ---------- Register commands on startup (guild-scoped: ‡πÄ‡∏£‡πá‡∏ß) ----------
async function registerCommands() {
  const rest = new REST({ version: "10" }).setToken(process.env.DISCORD_TOKEN);
  const appId = process.env.DISCORD_CLIENT_ID;
  const guildId = process.env.DISCORD_GUILD_ID;

  if (!appId || !guildId) {
    console.warn("‚ö†Ô∏è Missing CLIENT_ID or GUILD_ID; skip slash registration.");
    return;
  }

  await rest.put(Routes.applicationGuildCommands(appId, guildId), {
    body: slashDefs
  });
  console.log("‚úÖ Slash commands registered to guild:", guildId);
}

// ---------- Bot events ----------
client.once(Events.ClientReady, async (c) => {
  console.log(`‚úÖ Logged in as ${c.user.tag}`);
  try {
    await registerCommands();
  } catch (e) {
    console.error("‚ùå Register commands failed:", e);
  }
});

client.on(Events.InteractionCreate, async (i) => {
  if (!i.isChatInputCommand()) return;

  try {
    if (i.commandName === "ping") {
      const sent = await i.reply({ content: "Pong! üèì", fetchReply: true });
      const ms = sent.createdTimestamp - i.createdTimestamp;
      await i.editReply(`Pong! üèì \`${ms}ms\``);
    } else if (i.commandName === "help") {
      await i.reply({
        content:
          "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:\n‚Ä¢ `/ping` ‚Äî ‡πÄ‡∏ä‡πá‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏á\n‚Ä¢ `/help` ‚Äî ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á",
        ephemeral: true
      });
    }
  } catch (e) {
    console.error(e);
    if (i.deferred || i.replied) {
      await i.followUp({ content: "‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", ephemeral: true });
    } else {
      await i.reply({ content: "‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", ephemeral: true });
    }
  }
});

client.login(process.env.DISCORD_TOKEN);
